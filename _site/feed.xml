<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2018-07-29T10:12:42+08:00</updated><id>http://localhost:4000/</id><title type="html">Jarvis Zone</title><subtitle>Jarvis. Personal technology Blog. Java. Jvm. Spring. C++. Linux.
</subtitle><author><name>Jarvis.Wu</name><email>jarvis320700@gmail.com</email></author><entry><title type="html">Jvm系列：从一个题目简析垃圾回收</title><link href="http://localhost:4000/2018/02/06/%E4%BB%8E%E4%B8%80%E4%B8%AA%E9%A2%98%E7%9B%AE%E7%AE%80%E6%9E%90%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.html" rel="alternate" type="text/html" title="Jvm系列：从一个题目简析垃圾回收" /><published>2018-02-06T00:00:00+08:00</published><updated>2018-02-06T00:00:00+08:00</updated><id>http://localhost:4000/2018/02/06/%E4%BB%8E%E4%B8%80%E4%B8%AA%E9%A2%98%E7%9B%AE%E7%AE%80%E6%9E%90%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6</id><content type="html" xml:base="http://localhost:4000/2018/02/06/%E4%BB%8E%E4%B8%80%E4%B8%AA%E9%A2%98%E7%9B%AE%E7%AE%80%E6%9E%90%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.html">&lt;h2 id=&quot;一概述&quot;&gt;一、概述&lt;/h2&gt;
&lt;p&gt;  闲来有空翻翻书，捡捡一些基础点，就当静下心多写字。
Java基础的东西无论怎么样都会想到JVM，而提JVM必然想到最常见的一些点：字节码加载，类初始化，方法执行，对象内存分配和回收，线程和锁机制等等。归纳整理的时候，怎么可以少了它们。不过，我打算换个方式，不写太多概念（网上一搜一把的），想从一些代码、例子、题目或者疑问等方面来写写。&lt;/p&gt;

&lt;h2 id=&quot;二背景知识&quot;&gt;二、背景知识&lt;/h2&gt;
&lt;p&gt;JVM内存管理需要理解的点：内存空间的划分、内存分配和内存回收。&lt;/p&gt;

&lt;p&gt;内存空间：认识方法区、堆区、本地方法栈等几个空间，了解堆的分代管理。&lt;/p&gt;

&lt;p&gt;内存分配：在Java中这块比较容易，就是栈和堆，而创建对象都在堆区。&lt;/p&gt;

&lt;p&gt;内存回收：实战上最主要是关注什么时候会触发回收（GC）和回收对性能的影响，学习上可以了解不同回收起和回收算法。&lt;/p&gt;

&lt;p&gt;验证和测试需要的点：常见的启动参数、GUI类工具。&lt;/p&gt;

&lt;p&gt;常见的启动参数：-Xms -Xmx -Xmn 等等&lt;/p&gt;

&lt;p&gt;GUI类工具：JProfiler（推荐）、JVisualVM、MAT、JMap、JHat。&lt;/p&gt;

&lt;h2 id=&quot;三一个gc题目&quot;&gt;三、一个GC题目&lt;/h2&gt;
&lt;p&gt;1)当用-Xms30m -Xmx30m -Xmn10m -XX:+UseParallelGC 执行上面的代码时会执行几次Minor GC和几次Full GC呢？&lt;/p&gt;

&lt;p&gt;2)分别说明你的结果是如何推出来的？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static void main(String[] args) throws Exception{
    List&amp;lt;Object&amp;gt; caches=new ArrayList&amp;lt;Object&amp;gt;();
    for(int i=0;i&amp;lt;7;i++){
        caches.add(new byte[10241024*3]);
    }
    caches.clear();
    for(int j=0;j&amp;lt;2;j++){
        caches.add(new byte[10241024*3]);
    }
    Thread.sleep(5000);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;先思考下，别忙着往下看！！&lt;/p&gt;

&lt;p&gt;先思考下，别忙着往下看！！&lt;/p&gt;

&lt;p&gt;先思考下，别忙着往下看！！&lt;/p&gt;

&lt;h2 id=&quot;四小白式的分析过程&quot;&gt;四、小白式的分析过程&lt;/h2&gt;
&lt;p&gt;第一步分析启动参数：
首先，看到”UseParallelGC”参数，表示这里采用的是“Parallel Scavenge+Serial Old”。那么，从回收器的类型，可以知道堆的新生代是基于复制算法的gc(即内存模型有from和to区)，堆的老年代则基于标记-整理算法。
其次，看到”-Xms30m -Xmx30m”参数，表示堆区最大为30M，且不会动态扩展。 
最后，再看到”-Xmn10m”参数，表示新生代区为10m，而且采用默认的7.5:1，即Eden7.5M(7680k)，而from和to区各为1.25M。&lt;/p&gt;

&lt;p&gt;第二步分析第一个循环
i0（即表示i=0产生的对象，后面规律相同）和i1 会直接放入Eden区。因为优先放Eden区，而且够放，此时Eden为 6m/7.5m.（两者表示 已用/剩余 。此处的6m为近似值，其他jvm对象之类占用内存的，不细讨论）。&lt;/p&gt;

&lt;p&gt;i2来了，要放入Eden区，发现空间不够。触发MinorGC。然后把i2放到Eden。
结果将i0～i1直接诶转入老年代 ，原因是对象3m太大放不了From区(前面提到才1.25m)。
此时Eden区 3m/7.5m 老年代6m/20m
gc的log –&amp;gt; [PSYoungGen: 6451K-&amp;gt;272K(8960K)] 6451K-&amp;gt;6416K(29440K)&lt;/p&gt;

&lt;p&gt;i3来了，直接继续放入Eden区。 此时Eden区 6m/7.5m 老年代6m/20m&lt;/p&gt;

&lt;p&gt;i4来了，跟i2一样的情况，发现Eden不够放了。再次触发MinorGC。然后把i4放到Eden。
结果将i2～i3直接诶转入老年代，去陪i0和i1了。
此时Eden区 3m/7.5m 老年代12m/20m
gc的log –&amp;gt; [PSYoungGen: 6650K-&amp;gt;256K(8960K)] 12794K-&amp;gt;12544K(29440K)&lt;/p&gt;

&lt;p&gt;i5来了，继续放入Eden区，此时加上前面i4，Eden区 6m/7.5m 老年代12m/20m&lt;/p&gt;

&lt;p&gt;i6来了，跟前面i2、i4情况一样，触发了一次MinorGC。然后把i6放到Eden。
结果： i6 在Eden，i0～i5 6个在老年代。 此时Eden区 3m/7.5m 老年代18m/20m
gc的log –&amp;gt;[PSYoungGen: 6453K-&amp;gt;224K(8960K)] 18741K-&amp;gt;18656K(29440K)
这里还多了一次FullGC。
gc的log –&amp;gt;[PSYoungGen: 240K-&amp;gt;0K(8960K)] [PSOldGen: 18432K-&amp;gt;18593K(20480K)]
暂时未能完全分析明白这点，但gc日志来猜测，应该是标记-整理起作用了，为了整理出连续的空间吧。&lt;/p&gt;

&lt;p&gt;第三步： 由于执行了caches.clear(); 等于宣告前面的i0～i6的7个对象都不可用了（即GC Roots不可达）
但还由于各区都有足够大的空间，只要程序运行未达到”GC安全点”是不会触发GC的。&lt;/p&gt;

&lt;p&gt;第四步：
j0来了，它会继续放到Eden区，此时陪着还没回收的i6。
此时Eden区 6m/7.5m 老年代18m/20m&lt;/p&gt;

&lt;p&gt;j1来了，这时候内存管理会发现新生代和老年代都不够空间申请了，即触发FullGC。
结果：从老年代把不可用的i0～i5全部干掉，再把j0移入老年代，再把新生代中的i6干掉，然后j1放入新生代。
此时Eden区 3m/7.5m 老年代3m/20m
gc的log –&amp;gt;[PSYoungGen: 6178K-&amp;gt;0K(8960K)] [PSOldGen: 18593K-&amp;gt;3233K(20480K)]&lt;/p&gt;

&lt;h2 id=&quot;五通过运行程序验证分析&quot;&gt;五、通过运行程序，验证分析&lt;/h2&gt;
&lt;p&gt;  运行上面的程序，参数为： -Xms30m -Xmx30m -Xmn10m -XX:+UseParallelGC -XX:+PrintGCDetails
加上-XX:+PrintGCDetails，这样可以打印GC的log情况来验证前面的分析。&lt;/p&gt;

&lt;p&gt;  ps：不同的虚拟机版本打印的输出多少会有差异，以下log，是我在sum的1.6.0_43版本打印出来的，另外删减掉一些不关心的输出。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[GC [PSYoungGen: 6451K-&amp;gt;320K(8960K)]
[GC [PSYoungGen: 6698K-&amp;gt;240K(8960K)]
[GC [PSYoungGen: 6437K-&amp;gt;240K(8960K)]
[Full GC [PSYoungGen: 240K-&amp;gt;0K(8960K)] [PSOldGen: 18432K-&amp;gt;18594K(20480K)] 18672K-&amp;gt;18594K(29440K)
[Full GC [PSYoungGen: 6178K-&amp;gt;0K(8960K)] [PSOldGen: 18594K-&amp;gt;3234K(20480K)] 24773K-&amp;gt;3234K(29440K)
Heap
PSYoungGen total 8960K, used 3248K
    &amp;gt;eden space 7680K, 42% used
    &amp;gt;from space 1280K, 0% used
    &amp;gt;to space 1280K, 0% used
PSOldGen total 20480K, used 3234K
PSPermGen total 21248K, used 3043K
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;六最后补充涉及到的知识点&quot;&gt;六、最后补充涉及到的知识点&lt;/h2&gt;
&lt;h3 id=&quot;61-关于堆区分代管理&quot;&gt;6.1 关于堆区分代管理&lt;/h3&gt;
&lt;p&gt;  新生代GC（Minor GC）：主要是发生在新生代的收集动作，据说IBM做过调查，绝大多数对象都是朝生夕死，所以MinorGC非常频繁，速度也比较快。
老年代GC（Full GC）：是指发生在老年代的收集动作，但是通常也会对年轻代进行垃圾收集。&lt;/p&gt;

&lt;h3 id=&quot;62-gc几个参数说明&quot;&gt;6.2 GC几个参数说明&lt;/h3&gt;
&lt;p&gt;  -Xmx 设置JVM最大可用内存为30M。&lt;/p&gt;

&lt;p&gt;  -Xms 设置JVM扩展内存为30M。(此值一般设置与-Xmx相同,以避免每次垃圾回收完后JVM重新分配内存)&lt;/p&gt;

&lt;p&gt;  -Xmn：设置年轻代大小为10m。 (整个堆大小=年轻代大小 + 年老代大小 持久代大小 ： 持久代PermGen是非堆的，可以通过jconsole查看)&lt;/p&gt;

&lt;p&gt;  -Xss128k：(设置每个线程的堆栈大小)
持久代，是通过PermSize和MaxPermSize&lt;/p&gt;

&lt;p&gt;  -XX:+UseParallelGC：选择垃圾收集器为并行收集器。&lt;/p&gt;

&lt;h3 id=&quot;63-不同类型处理器&quot;&gt;6.3 不同类型处理器&lt;/h3&gt;
&lt;p&gt;  串行处理器： 适用数据量比较小（100M左右）；单处理器下并且对响应时间无要求的应用。 缺点：只能用于小型应用.&lt;/p&gt;

&lt;p&gt;  并行处理器： 适用“对吞吐量有高要求”，多CPU、对应用响应时间无要求的中、大型应用。举例：后台处理、科学计算。 缺点：应用响应时间可能较长.&lt;/p&gt;

&lt;p&gt;  并发处理器： 适用“对响应时间有高要求”，多CPU、对应用响应时间有较高要求的中、大型应用。举例：Web服务器/应用服务器、电信交换、集成开发环境。&lt;/p&gt;

&lt;h3 id=&quot;64-其它&quot;&gt;6.4 其它&lt;/h3&gt;
&lt;p&gt;  GC Roots不可达：GC回收过程判断对象是否可以回收的一种方式，叫可达性测试！
打印gc日志：启动程序时加vm参数-XX:+PrintGCDetails。&lt;/p&gt;</content><author><name>Jarvis.Wu</name><email>jarvis320700@gmail.com</email></author><category term="Jvm" /><summary type="html">一、概述   闲来有空翻翻书，捡捡一些基础点，就当静下心多写字。 Java基础的东西无论怎么样都会想到JVM，而提JVM必然想到最常见的一些点：字节码加载，类初始化，方法执行，对象内存分配和回收，线程和锁机制等等。归纳整理的时候，怎么可以少了它们。不过，我打算换个方式，不写太多概念（网上一搜一把的），想从一些代码、例子、题目或者疑问等方面来写写。 二、背景知识 JVM内存管理需要理解的点：内存空间的划分、内存分配和内存回收。 内存空间：认识方法区、堆区、本地方法栈等几个空间，了解堆的分代管理。 内存分配：在Java中这块比较容易，就是栈和堆，而创建对象都在堆区。 内存回收：实战上最主要是关注什么时候会触发回收（GC）和回收对性能的影响，学习上可以了解不同回收起和回收算法。 验证和测试需要的点：常见的启动参数、GUI类工具。 常见的启动参数：-Xms -Xmx -Xmn 等等 GUI类工具：JProfiler（推荐）、JVisualVM、MAT、JMap、JHat。 三、一个GC题目 1)当用-Xms30m -Xmx30m -Xmn10m -XX:+UseParallelGC 执行上面的代码时会执行几次Minor GC和几次Full GC呢？ 2)分别说明你的结果是如何推出来的？ public static void main(String[] args) throws Exception{ List&amp;lt;Object&amp;gt; caches=new ArrayList&amp;lt;Object&amp;gt;(); for(int i=0;i&amp;lt;7;i++){ caches.add(new byte[10241024*3]); } caches.clear(); for(int j=0;j&amp;lt;2;j++){ caches.add(new byte[10241024*3]); } Thread.sleep(5000); } 先思考下，别忙着往下看！！ 先思考下，别忙着往下看！！ 先思考下，别忙着往下看！！ 四、小白式的分析过程 第一步分析启动参数： 首先，看到”UseParallelGC”参数，表示这里采用的是“Parallel Scavenge+Serial Old”。那么，从回收器的类型，可以知道堆的新生代是基于复制算法的gc(即内存模型有from和to区)，堆的老年代则基于标记-整理算法。 其次，看到”-Xms30m -Xmx30m”参数，表示堆区最大为30M，且不会动态扩展。 最后，再看到”-Xmn10m”参数，表示新生代区为10m，而且采用默认的7.5:1，即Eden7.5M(7680k)，而from和to区各为1.25M。 第二步分析第一个循环 i0（即表示i=0产生的对象，后面规律相同）和i1 会直接放入Eden区。因为优先放Eden区，而且够放，此时Eden为 6m/7.5m.（两者表示 已用/剩余 。此处的6m为近似值，其他jvm对象之类占用内存的，不细讨论）。 i2来了，要放入Eden区，发现空间不够。触发MinorGC。然后把i2放到Eden。 结果将i0～i1直接诶转入老年代 ，原因是对象3m太大放不了From区(前面提到才1.25m)。 此时Eden区 3m/7.5m 老年代6m/20m gc的log –&amp;gt; [PSYoungGen: 6451K-&amp;gt;272K(8960K)] 6451K-&amp;gt;6416K(29440K) i3来了，直接继续放入Eden区。 此时Eden区 6m/7.5m 老年代6m/20m i4来了，跟i2一样的情况，发现Eden不够放了。再次触发MinorGC。然后把i4放到Eden。 结果将i2～i3直接诶转入老年代，去陪i0和i1了。 此时Eden区 3m/7.5m 老年代12m/20m gc的log –&amp;gt; [PSYoungGen: 6650K-&amp;gt;256K(8960K)] 12794K-&amp;gt;12544K(29440K) i5来了，继续放入Eden区，此时加上前面i4，Eden区 6m/7.5m 老年代12m/20m i6来了，跟前面i2、i4情况一样，触发了一次MinorGC。然后把i6放到Eden。 结果： i6 在Eden，i0～i5 6个在老年代。 此时Eden区 3m/7.5m 老年代18m/20m gc的log –&amp;gt;[PSYoungGen: 6453K-&amp;gt;224K(8960K)] 18741K-&amp;gt;18656K(29440K) 这里还多了一次FullGC。 gc的log –&amp;gt;[PSYoungGen: 240K-&amp;gt;0K(8960K)] [PSOldGen: 18432K-&amp;gt;18593K(20480K)] 暂时未能完全分析明白这点，但gc日志来猜测，应该是标记-整理起作用了，为了整理出连续的空间吧。 第三步： 由于执行了caches.clear(); 等于宣告前面的i0～i6的7个对象都不可用了（即GC Roots不可达） 但还由于各区都有足够大的空间，只要程序运行未达到”GC安全点”是不会触发GC的。 第四步： j0来了，它会继续放到Eden区，此时陪着还没回收的i6。 此时Eden区 6m/7.5m 老年代18m/20m j1来了，这时候内存管理会发现新生代和老年代都不够空间申请了，即触发FullGC。 结果：从老年代把不可用的i0～i5全部干掉，再把j0移入老年代，再把新生代中的i6干掉，然后j1放入新生代。 此时Eden区 3m/7.5m 老年代3m/20m gc的log –&amp;gt;[PSYoungGen: 6178K-&amp;gt;0K(8960K)] [PSOldGen: 18593K-&amp;gt;3233K(20480K)] 五、通过运行程序，验证分析   运行上面的程序，参数为： -Xms30m -Xmx30m -Xmn10m -XX:+UseParallelGC -XX:+PrintGCDetails 加上-XX:+PrintGCDetails，这样可以打印GC的log情况来验证前面的分析。   ps：不同的虚拟机版本打印的输出多少会有差异，以下log，是我在sum的1.6.0_43版本打印出来的，另外删减掉一些不关心的输出。 [GC [PSYoungGen: 6451K-&amp;gt;320K(8960K)] [GC [PSYoungGen: 6698K-&amp;gt;240K(8960K)] [GC [PSYoungGen: 6437K-&amp;gt;240K(8960K)] [Full GC [PSYoungGen: 240K-&amp;gt;0K(8960K)] [PSOldGen: 18432K-&amp;gt;18594K(20480K)] 18672K-&amp;gt;18594K(29440K) [Full GC [PSYoungGen: 6178K-&amp;gt;0K(8960K)] [PSOldGen: 18594K-&amp;gt;3234K(20480K)] 24773K-&amp;gt;3234K(29440K) Heap PSYoungGen total 8960K, used 3248K &amp;gt;eden space 7680K, 42% used &amp;gt;from space 1280K, 0% used &amp;gt;to space 1280K, 0% used PSOldGen total 20480K, used 3234K PSPermGen total 21248K, used 3043K 六、最后补充涉及到的知识点 6.1 关于堆区分代管理   新生代GC（Minor GC）：主要是发生在新生代的收集动作，据说IBM做过调查，绝大多数对象都是朝生夕死，所以MinorGC非常频繁，速度也比较快。 老年代GC（Full GC）：是指发生在老年代的收集动作，但是通常也会对年轻代进行垃圾收集。 6.2 GC几个参数说明   -Xmx 设置JVM最大可用内存为30M。   -Xms 设置JVM扩展内存为30M。(此值一般设置与-Xmx相同,以避免每次垃圾回收完后JVM重新分配内存)   -Xmn：设置年轻代大小为10m。 (整个堆大小=年轻代大小 + 年老代大小 持久代大小 ： 持久代PermGen是非堆的，可以通过jconsole查看)   -Xss128k：(设置每个线程的堆栈大小) 持久代，是通过PermSize和MaxPermSize   -XX:+UseParallelGC：选择垃圾收集器为并行收集器。 6.3 不同类型处理器   串行处理器： 适用数据量比较小（100M左右）；单处理器下并且对响应时间无要求的应用。 缺点：只能用于小型应用.   并行处理器： 适用“对吞吐量有高要求”，多CPU、对应用响应时间无要求的中、大型应用。举例：后台处理、科学计算。 缺点：应用响应时间可能较长.   并发处理器： 适用“对响应时间有高要求”，多CPU、对应用响应时间有较高要求的中、大型应用。举例：Web服务器/应用服务器、电信交换、集成开发环境。 6.4 其它   GC Roots不可达：GC回收过程判断对象是否可以回收的一种方式，叫可达性测试！ 打印gc日志：启动程序时加vm参数-XX:+PrintGCDetails。</summary></entry><entry><title type="html">Reboot</title><link href="http://localhost:4000/2018/01/01/reboot.html" rel="alternate" type="text/html" title="Reboot" /><published>2018-01-01T00:00:00+08:00</published><updated>2018-01-01T00:00:00+08:00</updated><id>http://localhost:4000/2018/01/01/reboot</id><content type="html" xml:base="http://localhost:4000/2018/01/01/reboot.html">&lt;p&gt;  毕业后基本没写过博客，因为觉得写出来的东西要么太浅，要么网上肯定有人写过，于是一放就是好几年了。在这期间，阅读和学习后只是做做笔记，记录下来，自己翻翻。但毕竟笔记只有自己看，虽说也会整理，但较为随意，始终是以记为主，缺乏更完整的整理和思考。当然，博客也不一定有人看，只是当作是一种约束罢了。&lt;/p&gt;

&lt;p&gt;  这两年每每阅读别人的博客时，总在想，如果坚持下来，也许我也写了不少吧，也许就是这种不甘心吧。生命不息，折腾（学习）不止。&lt;/p&gt;

&lt;p&gt;  还有，工作久了发现技术输出还是蛮重要的，可以提升自己的影响力。可以输出文章，也可以是做分享。无论哪种，在这个过程中，即能锻炼写作的能力，又锻炼对某项技术或产品进行思考的能力，创作力或对信息的整理能力。写得好写得不好，可以慢慢改进，过程才是最重要的。&lt;/p&gt;</content><author><name>Jarvis.Wu</name><email>jarvis320700@gmail.com</email></author><category term="感悟" /><summary type="html">  毕业后基本没写过博客，因为觉得写出来的东西要么太浅，要么网上肯定有人写过，于是一放就是好几年了。在这期间，阅读和学习后只是做做笔记，记录下来，自己翻翻。但毕竟笔记只有自己看，虽说也会整理，但较为随意，始终是以记为主，缺乏更完整的整理和思考。当然，博客也不一定有人看，只是当作是一种约束罢了。   这两年每每阅读别人的博客时，总在想，如果坚持下来，也许我也写了不少吧，也许就是这种不甘心吧。生命不息，折腾（学习）不止。   还有，工作久了发现技术输出还是蛮重要的，可以提升自己的影响力。可以输出文章，也可以是做分享。无论哪种，在这个过程中，即能锻炼写作的能力，又锻炼对某项技术或产品进行思考的能力，创作力或对信息的整理能力。写得好写得不好，可以慢慢改进，过程才是最重要的。</summary></entry></feed>